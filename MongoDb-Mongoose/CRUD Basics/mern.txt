Theory
------

Suppose We have a project and it has a database called 'A'

and A database contains user , products etc . these are called
collections. so user is a collection of 'A'. and whithin a collection
if we take for example from the 'user' collection if we take a single 
user then it is called 'document'

---------
npm i mongoose

lets create a model called userModel.js

userModel.js
------------

const mongoose = require ('mongoose')

mongoose.connect(`mongodb://localhost:27017/mongopractice`)

//creating a schema: schema is basically telling what properties will the user contain
    //it takes an object
const userSchema = mongoose.Schema({
    name: String,
    username: String,
    email : String
})


//creating the Model to Export
module.exports = mongoose.model('users' , userSchema)


app.js
-------
on out app.js we simply require the model and perform CRUD operations

const userModel = require('./userModel')

//now we create routes for create Read Update Delete and we must remember they are async operations
    //so we must use async on the nearest function

//CRUD Basics
app.get('/create', async (req, res) => {

    const createUser = await userModel.create({
        name: 'Ahanaf1',
        username: 'Ahanaf123',
        email: 'ahanaf.tanvir@gmail.com'
    })
    res.send(createUser)
})

app.get('/read', async (req, res) => {
    const Singleuser = await userModel.find({ username: 'Ahanaf123' }) //returns a list of the matched user
    //const user = await userModel.findOne({username : 'Ahanaf'}) //returns the first match and returns a object
    const user = await userModel.find()
    res.send(user)
})

app.get('/update', async (req, res) => {
    const updatedUser = await userModel.findOneAndUpdate({ name: 'Ahanaf' }, { username: 'Ahanaf1337' }, { new: true })
    res.send(updatedUser)
})

app.get('/delete', async (req, res) => {
    const user = await userModel.findOneAndDelete({ username: 'Ahanaf' })
    res.send(user)
})